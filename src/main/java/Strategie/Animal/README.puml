@startuml DCL

class Animal{
    - String : name;
	- double : height;
	- int : weight;
	- String : favFood;
	- double : speed;
	- String : sound;
    + Flys : flyingType;

    + String tryToFly()
interface Flys{
    + void setFlyingAbility(Flys)
}

class AnimalExample{
    {static} + void main()
}

class Bird{}

class Dog{
    + void digHole()
}

interface Flys{
    + String fly()
}
class ItFlys{
    + String fly()
}
class CantFly{
    + String fly()
}

ItFlys -up-|> Flys
CantFly -up-|> Flys

Flys <-up- Animal
Bird -up-|> Animal
Dog -up-|> Animal

AnimalExample .. Animal

@enduml


@startuml DSS

skinparam Style strictuml
title Diagramme de sÃ©quence
actor AnimalExemple
participant "sparky:Dog" as Dog
participant "tweety:Bird" as Bird
participant "flyingType:CantFly" as CantFly
participant "flyingType:ItFlys" as CanFly
participant "newFlyingType:ItFlys" as CanFly2
participant "System.out" as sysout

AnimalExemple -> Dog ** : Animal sparky = new Dog()
Dog -> CantFly ** : Flys flyingType = new CantFly()
AnimalExemple -> Dog : String flyText = tryToFly()
Dog -> CantFly : String flyText = fly()
AnimalExemple -> sysout: println(flyText)
== ==

AnimalExemple -> Bird ** : Animal tweety = new Bird()
Bird -> CanFly ** : Flys flyingType = new ItFlys()
AnimalExemple -> Bird : String flyText = tryToFly()
Bird -> CanFly : String flyText = fly()
AnimalExemple -> sysout: println(flyText)

== ==

AnimalExemple -> CanFly2 ** : Flys newFlyingType = new ItFlys()
AnimalExemple -> Dog : setFlyingAbility(newFlyingType)
AnimalExemple -> Dog : String flyText = tryToFly()
Dog -> CanFly2 : String flyText = fly()
AnimalExemple -> sysout: println(flyText)

@enduml